import base64
import grpc
import os
import struct
import time

from solders.keypair import Keypair
from solders.message import Message
from solders.pubkey import Pubkey
from solders.transaction import Transaction
from solders.system_program import ID as SYS_PROGRAM_ID

# The following imports are generated by grpc_tools.protoc
import gateway_pb2
import gateway_pb2_grpc
import types_pb2

# --- Configuration ---
GATEWAY_HOST = os.getenv("GATEWAY_HOST", "localhost")
GATEWAY_PORT = os.getenv("GATEWAY_PORT", "50051")
GATEWAY_ADDRESS = f"{GATEWAY_HOST}:{GATEWAY_PORT}"

# --- Helper Functions ---
def get_program_id() -> Pubkey:
    """Reads the program ID from the environment variable."""
    program_id_str = os.getenv("W3B2_CONNECTOR__PROGRAM_ID")
    if not program_id_str:
        raise ValueError("W3B2_CONNECTOR__PROGRAM_ID environment variable not set")
    return Pubkey.from_string(program_id_str)

def pda_from_seeds(seeds, program_id: Pubkey) -> Pubkey:
    """Derives a Program-Derived Address (PDA) from seeds."""
    (pda, _bump) = Pubkey.find_program_address(seeds, program_id)
    return pda

def print_step(title):
    """Prints a formatted step title."""
    print("\n" + "="*60)
    print(f" {title}")
    print("="*60)

def wait_for_gateway(stub):
    """Waits for the gRPC gateway to become available."""
    print_step("Attempting to connect to gRPC gateway...")
    while True:
        try:
            # Use a simple, non-modifying RPC to check for health
            stub.PrepareAdminRegisterProfile(
                types_pb2.PrepareAdminRegisterProfileRequest(
                    authority_pubkey=str(Keypair().pubkey()),
                    communication_pubkey=str(Keypair().pubkey())
                ),
                timeout=5
            )
        # This will fail because the gateway will try to build a transaction
        # and fail because the authority doesn't exist, but it proves connectivity.
        except grpc.RpcError as e:
            if e.code() == grpc.StatusCode.FAILED_PRECONDITION:
                print(f"Successfully connected to gateway at {GATEWAY_ADDRESS}")
                return
        except Exception as e:
            print(f"Gateway not ready yet, retrying in 5 seconds... (Error: {e})")
            time.sleep(5)


def sign_and_submit_tx(stub, unsigned_tx_bytes: bytes, signer: Keypair) -> str:
    """Signs and submits a transaction, returning the signature."""
    # Deserialize the unsigned transaction sent from the gateway
    message = Message.from_bytes(unsigned_tx_bytes)

    # Sign the transaction with the appropriate keypair
    signed_tx = Transaction.new_signed_with_payer(
        [signer],
        message,
        message.recent_blockhash,
    )

    # Submit the signed transaction
    submit_req = types_pb2.SubmitTransactionRequest(
        signed_tx=signed_tx.to_bytes()
    )
    submit_res = stub.SubmitTransaction(submit_req)
    return submit_res.signature


# --- Main Client Logic ---
def run_client():
    """The main function to run the example client workflow."""
    channel = grpc.insecure_channel(GATEWAY_ADDRESS)
    stub = gateway_pb2_grpc.BridgeGatewayServiceStub(channel)

    wait_for_gateway(stub)

    # 1. Generate local keypairs
    print_step("1. Generating Local Keypairs")
    program_id = get_program_id()
    admin_authority = Keypair() # The service provider
    user_a_authority = Keypair() # First user, Alice
    user_b_authority = Keypair() # Second user, Bob
    # In this example, the admin also acts as the oracle
    oracle_authority = admin_authority

    print(f"Program ID:           {program_id}")
    print(f"Admin Authority:      {admin_authority.pubkey()}")
    print(f"User A (Alice):       {user_a_authority.pubkey()}")
    print(f"User B (Bob):         {user_b_authority.pubkey()}")
    print(f"Oracle Authority:     {oracle_authority.pubkey()}")


    # 2. Register Admin Profile
    print_step("2. Registering Admin Profile")
    admin_pda = pda_from_seeds([b"admin", bytes(admin_authority.pubkey())], program_id)
    print(f"Derived Admin PDA:    {admin_pda}")

    prep_req = types_pb2.PrepareAdminRegisterProfileRequest(
        authority_pubkey=str(admin_authority.pubkey()),
        communication_pubkey=str(admin_authority.pubkey()), # Using same key for simplicity
    )
    prep_res = stub.PrepareAdminRegisterProfile(prep_req)
    signature = sign_and_submit_tx(stub, prep_res.unsigned_tx, admin_authority)
    print(f"Admin registration successful. Signature: {signature}")


    # 3. Register User Profile
    print_step("3. Registering User Profiles (Alice and Bob)")
    user_a_pda = pda_from_seeds([b"user", bytes(user_a_authority.pubkey()), bytes(admin_pda)], program_id)
    user_b_pda = pda_from_seeds([b"user", bytes(user_b_authority.pubkey()), bytes(admin_pda)], program_id)
    print(f"Derived User A PDA:   {user_a_pda}")
    print(f"Derived User B PDA:   {user_b_pda}")

    # Register User A (Alice)
    prep_req = types_pb2.PrepareUserCreateProfileRequest(
        authority_pubkey=str(user_a_authority.pubkey()),
        target_admin_pda=str(admin_pda),
        communication_pubkey=str(user_a_authority.pubkey()),
    )
    prep_res = stub.PrepareUserCreateProfile(prep_req)
    signature = sign_and_submit_tx(stub, prep_res.unsigned_tx, user_a_authority)
    print(f"User A registration successful. Signature: {signature}")

    # Register User B (Bob)
    prep_req = types_pb2.PrepareUserCreateProfileRequest(
        authority_pubkey=str(user_b_authority.pubkey()),
        target_admin_pda=str(admin_pda),
        communication_pubkey=str(user_b_authority.pubkey()),
    )
    prep_res = stub.PrepareUserCreateProfile(prep_req)
    signature = sign_and_submit_tx(stub, prep_res.unsigned_tx, user_b_authority)
    print(f"User B registration successful. Signature: {signature}")


    # 4. User Deposits Funds
    print_step("4. Users Depositing Funds (0.1 SOL each)")
    deposit_amount_lamports = 100_000_000 # 0.1 SOL

    # User A deposits
    prep_req = types_pb2.PrepareUserDepositRequest(
        authority_pubkey=str(user_a_authority.pubkey()),
        admin_profile_pda=str(admin_pda),
        amount=deposit_amount_lamports,
    )
    prep_res = stub.PrepareUserDeposit(prep_req)
    signature = sign_and_submit_tx(stub, prep_res.unsigned_tx, user_a_authority)
    print(f"User A deposit successful. Signature: {signature}")

    # User B deposits
    prep_req = types_pb2.PrepareUserDepositRequest(
        authority_pubkey=str(user_b_authority.pubkey()),
        admin_profile_pda=str(admin_pda),
        amount=deposit_amount_lamports,
    )
    prep_res = stub.PrepareUserDeposit(prep_req)
    signature = sign_and_submit_tx(stub, prep_res.unsigned_tx, user_b_authority)
    print(f"User B deposit successful. Signature: {signature}")

    # 5. Start communication loop
    print_step("5. Starting Communication Loop")
    command_counter = 0
    while True:
        try:
            # Alice sends a message
            command_counter += 1
            print(f"\n--- Turn {command_counter}: Alice sends a command ---")
            dispatch_command(stub, user_a_authority, admin_pda, oracle_authority, command_counter)
            time.sleep(5)

            # Bob sends a message
            command_counter += 1
            print(f"\n--- Turn {command_counter}: Bob sends a command ---")
            dispatch_command(stub, user_b_authority, admin_pda, oracle_authority, command_counter)
            time.sleep(5)

        except grpc.RpcError as e:
            print(f"❌ An RPC error occurred: {e.code()} - {e.details()}")
        except Exception as e:
            print(f"❌ An unexpected error occurred: {e}")

def dispatch_command(stub, user_authority, admin_pda, oracle_authority, command_num):
    """Helper function to dispatch a single paid command."""
    command_id = 100 + command_num
    price = 1_000_000 # 0.001 SOL
    timestamp = int(time.time())
    payload = f"payload_for_command_{command_num}".encode('utf-8')

    message_to_sign = (
        struct.pack("<H", command_id) +
        struct.pack("<Q", price) +
        struct.pack("<q", timestamp)
    )
    oracle_signature = oracle_authority.sign(message_to_sign).to_bytes()

    prep_req = types_pb2.PrepareUserDispatchCommandRequest(
        authority_pubkey=str(user_authority.pubkey()),
        target_admin_pda=str(admin_pda),
        command_id=command_id,
        price=price,
        timestamp=timestamp,
        payload=payload,
        oracle_pubkey=str(oracle_authority.pubkey()),
        oracle_signature=oracle_signature,
    )
    prep_res = stub.PrepareUserDispatchCommand(prep_req)
    signature = sign_and_submit_tx(stub, prep_res.unsigned_tx, user_authority)
    print(f"Command #{command_num} dispatched successfully. Signature: {signature}")


if __name__ == "__main__":
    run_client()
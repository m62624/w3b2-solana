{
  "address": "HykRMCadVCe49q4GVrXKTwLG3fqCEgd5W5qQqN3AFAEY",
  "metadata": {
    "name": "w3b2_solana_program",
    "version": "0.1.0",
    "spec": "0.1.0",
    "description": "Created with Anchor"
  },
  "docs": [
    "Defines the primary instruction interface for the W3B2 Bridge program.",
    "Each public function in this module corresponds to a callable on-chain instruction."
  ],
  "instructions": [
    {
      "name": "admin_ban_user",
      "docs": [
        "Allows an admin to ban a user, preventing them from using the service."
      ],
      "discriminator": [
        38,
        174,
        14,
        0,
        122,
        243,
        199,
        150
      ],
      "accounts": [
        {
          "name": "authority",
          "docs": [
            "The `Signer` (the admin's wallet) who must be the `authority` of the `admin_profile`."
          ],
          "writable": true,
          "signer": true
        },
        {
          "name": "admin_profile",
          "docs": [
            "The `AdminProfile` of the admin initiating the ban. Constraints verify",
            "the `authority` and the PDA seeds."
          ],
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  97,
                  100,
                  109,
                  105,
                  110
                ]
              },
              {
                "kind": "account",
                "path": "authority"
              }
            ]
          }
        },
        {
          "name": "user_profile",
          "docs": [
            "The `UserProfile` to be banned. This account will be mutated.",
            "A constraint ensures this profile is associated with this specific `admin_profile`."
          ],
          "writable": true
        }
      ],
      "args": []
    },
    {
      "name": "admin_close_profile",
      "docs": [
        "Closes an `AdminProfile` account and refunds its rent lamports to the owner.",
        "This effectively unregisters a service from the protocol.",
        "",
        "# Arguments",
        "* `ctx` - The context, containing the admin's wallet (`authority`) and the `admin_profile` to be closed."
      ],
      "discriminator": [
        205,
        195,
        136,
        65,
        180,
        179,
        242,
        127
      ],
      "accounts": [
        {
          "name": "authority",
          "docs": [
            "The `Signer` (the admin's wallet) who must be the `authority` of the `admin_profile`.",
            "This account will receive the rent lamports back from the closed account."
          ],
          "writable": true,
          "signer": true
        },
        {
          "name": "admin_profile",
          "docs": [
            "The `AdminProfile` account to be closed. Constraints verify the `authority`",
            "and PDA seeds. The `close` directive tells Anchor to return all lamports",
            "from this account to the `authority`."
          ],
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  97,
                  100,
                  109,
                  105,
                  110
                ]
              },
              {
                "kind": "account",
                "path": "authority"
              }
            ]
          }
        }
      ],
      "args": []
    },
    {
      "name": "admin_dispatch_command",
      "docs": [
        "Allows an admin to send a command or notification to a user. This is a non-financial",
        "transaction; its primary purpose is to emit an `AdminCommandDispatched` event that",
        "an off-chain user `connector` can listen and react to.",
        "",
        "# Arguments",
        "* `ctx` - The context, including the admin's wallet (`admin_authority`), their `admin_profile`, and the target `user_profile`.",
        "* `command_id` - The `u64` identifier of the admin's command.",
        "* `payload` - An opaque `Vec<u8>` for application-specific data."
      ],
      "discriminator": [
        114,
        93,
        0,
        112,
        135,
        238,
        78,
        48
      ],
      "accounts": [
        {
          "name": "admin_authority",
          "docs": [
            "The `Signer` of the transaction (the admin's wallet)."
          ],
          "signer": true
        },
        {
          "name": "admin_profile",
          "docs": [
            "The admin's own profile PDA. Constraints ensure that the `admin_authority`",
            "is the legitimate owner of this profile."
          ],
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  97,
                  100,
                  109,
                  105,
                  110
                ]
              },
              {
                "kind": "account",
                "path": "admin_authority"
              }
            ]
          }
        },
        {
          "name": "user_profile",
          "docs": [
            "The target `UserProfile` to which the command is being sent. A constraint",
            "ensures this profile is associated with this specific `admin_profile`."
          ]
        }
      ],
      "args": [
        {
          "name": "command_id",
          "type": "u64"
        },
        {
          "name": "payload",
          "type": "bytes"
        }
      ]
    },
    {
      "name": "admin_register_profile",
      "docs": [
        "Initializes a new `AdminProfile` PDA for a service provider. This instruction",
        "creates the on-chain representation of a service, setting its owner (`authority`)",
        "and initial configuration.",
        "",
        "# Arguments",
        "* `ctx` - The context, containing the admin's wallet as a `Signer`.",
        "* `communication_pubkey` - The public key the admin will use for off-chain communication."
      ],
      "discriminator": [
        101,
        185,
        51,
        50,
        231,
        33,
        190,
        56
      ],
      "accounts": [
        {
          "name": "authority",
          "docs": [
            "The `Signer` (the admin's wallet) who will become the owner of the new `AdminProfile`."
          ],
          "writable": true,
          "signer": true
        },
        {
          "name": "admin_profile",
          "docs": [
            "The new `AdminProfile` account to be initialized. Its address is a PDA",
            "derived from the `authority`'s key."
          ],
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  97,
                  100,
                  109,
                  105,
                  110
                ]
              },
              {
                "kind": "account",
                "path": "authority"
              }
            ]
          }
        },
        {
          "name": "system_program",
          "docs": [
            "The Solana System Program, required by Anchor for account creation (`init`)."
          ],
          "address": "11111111111111111111111111111111"
        }
      ],
      "args": [
        {
          "name": "communication_pubkey",
          "type": "pubkey"
        }
      ]
    },
    {
      "name": "admin_set_config",
      "docs": [
        "Sets or updates the configuration for an existing `AdminProfile`.",
        "This allows changing the `oracle_authority`, `timestamp_validity_seconds`,",
        "and `communication_pubkey`. Any field passed as `None` will be ignored.",
        "",
        "# Arguments",
        "* `ctx` - The context, containing the admin's wallet as a `Signer`.",
        "* `new_oracle_authority` - An optional new `Pubkey` for the oracle.",
        "* `new_timestamp_validity` - An optional new duration in seconds for signature validity.",
        "* `new_communication_pubkey` - An optional new `Pubkey` for off-chain communication."
      ],
      "discriminator": [
        35,
        56,
        160,
        84,
        132,
        156,
        27,
        79
      ],
      "accounts": [
        {
          "name": "authority",
          "docs": [
            "The `Signer` (the admin's wallet) who must be the `authority` of the `admin_profile`."
          ],
          "writable": true,
          "signer": true
        },
        {
          "name": "admin_profile",
          "docs": [
            "The `AdminProfile` account to be updated. Constraints verify the `authority`",
            "and the account's PDA seeds."
          ],
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  97,
                  100,
                  109,
                  105,
                  110
                ]
              },
              {
                "kind": "account",
                "path": "authority"
              }
            ]
          }
        }
      ],
      "args": [
        {
          "name": "new_oracle_authority",
          "type": {
            "option": "pubkey"
          }
        },
        {
          "name": "new_timestamp_validity",
          "type": {
            "option": "i64"
          }
        },
        {
          "name": "new_communication_pubkey",
          "type": {
            "option": "pubkey"
          }
        },
        {
          "name": "new_unban_fee",
          "type": {
            "option": "u64"
          }
        }
      ]
    },
    {
      "name": "admin_unban_user",
      "docs": [
        "Allows an admin to unban a user, restoring their access to the service."
      ],
      "discriminator": [
        213,
        103,
        241,
        137,
        68,
        193,
        25,
        192
      ],
      "accounts": [
        {
          "name": "authority",
          "docs": [
            "The `Signer` (the admin's wallet) who must be the `authority` of the `admin_profile`."
          ],
          "writable": true,
          "signer": true
        },
        {
          "name": "admin_profile",
          "docs": [
            "The `AdminProfile` of the admin initiating the unban. Constraints verify",
            "the `authority` and the PDA seeds."
          ],
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  97,
                  100,
                  109,
                  105,
                  110
                ]
              },
              {
                "kind": "account",
                "path": "authority"
              }
            ]
          }
        },
        {
          "name": "user_profile",
          "docs": [
            "The `UserProfile` to be unbanned. This account will be mutated.",
            "A constraint ensures this profile is associated with this specific `admin_profile`."
          ],
          "writable": true
        }
      ],
      "args": []
    },
    {
      "name": "admin_withdraw",
      "docs": [
        "Allows an admin to withdraw earned funds from their `AdminProfile`'s internal balance",
        "to a specified destination wallet.",
        "",
        "# Arguments",
        "* `ctx` - The context, containing the admin's wallet as a `Signer` and the destination account.",
        "* `amount` - The number of lamports to withdraw."
      ],
      "discriminator": [
        160,
        166,
        147,
        222,
        46,
        220,
        75,
        224
      ],
      "accounts": [
        {
          "name": "authority",
          "docs": [
            "The `Signer` (the admin's wallet) who must be the `authority` of the `admin_profile`."
          ],
          "writable": true,
          "signer": true
        },
        {
          "name": "admin_profile",
          "docs": [
            "The `AdminProfile` from which funds will be withdrawn. Constraints",
            "verify the `authority` and the PDA seeds."
          ],
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  97,
                  100,
                  109,
                  105,
                  110
                ]
              },
              {
                "kind": "account",
                "path": "authority"
              }
            ]
          }
        },
        {
          "name": "destination",
          "docs": [
            "The account that will receive the withdrawn lamports. It is marked as `mut`",
            "because its lamport balance will be increased.",
            "from a program-controlled PDA, and does not require data deserialization."
          ],
          "writable": true
        }
      ],
      "args": [
        {
          "name": "amount",
          "type": "u64"
        }
      ]
    },
    {
      "name": "log_action",
      "docs": [
        "A generic instruction to log a significant off-chain action to the blockchain,",
        "creating an immutable, auditable record.",
        "",
        "# Arguments",
        "* `ctx` - The context, containing the `Signer` (user or admin wallet) and the associated profiles.",
        "* `session_id` - A `u64` identifier to correlate this action with a session.",
        "* `action_code` - A `u16` code representing the specific off-chain action."
      ],
      "discriminator": [
        123,
        192,
        243,
        96,
        38,
        250,
        134,
        135
      ],
      "accounts": [
        {
          "name": "authority",
          "writable": true,
          "signer": true
        },
        {
          "name": "user_profile",
          "docs": [
            "The user's profile PDA."
          ],
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  117,
                  115,
                  101,
                  114
                ]
              },
              {
                "kind": "account",
                "path": "user_profile.authority",
                "account": "UserProfile"
              },
              {
                "kind": "account",
                "path": "admin_profile"
              }
            ]
          }
        },
        {
          "name": "admin_profile",
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  97,
                  100,
                  109,
                  105,
                  110
                ]
              },
              {
                "kind": "account",
                "path": "admin_profile.authority",
                "account": "AdminProfile"
              }
            ]
          }
        }
      ],
      "args": [
        {
          "name": "session_id",
          "type": "u64"
        },
        {
          "name": "action_code",
          "type": "u16"
        }
      ]
    },
    {
      "name": "user_close_profile",
      "docs": [
        "Closes a `UserProfile` account. All remaining lamports (both from the deposit",
        "balance and for rent) are automatically returned to the user's `authority`.",
        "",
        "# Arguments",
        "* `ctx` - The context, containing the user's wallet (`authority`) and the `user_profile` to be closed."
      ],
      "discriminator": [
        201,
        30,
        151,
        78,
        84,
        1,
        60,
        230
      ],
      "accounts": [
        {
          "name": "authority",
          "docs": [
            "The `Signer` (the user's wallet) who must be the `authority` of the `user_profile`.",
            "This account will receive the refunded lamports."
          ],
          "writable": true,
          "signer": true
        },
        {
          "name": "admin_profile",
          "docs": [
            "The `AdminProfile` associated with the `user_profile`."
          ]
        },
        {
          "name": "user_profile",
          "docs": [
            "The `UserProfile` account to be closed. The `close` directive will transfer",
            "all its lamports to the `authority`."
          ],
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  117,
                  115,
                  101,
                  114
                ]
              },
              {
                "kind": "account",
                "path": "authority"
              },
              {
                "kind": "account",
                "path": "admin_profile"
              }
            ]
          }
        }
      ],
      "args": []
    },
    {
      "name": "user_create_profile",
      "docs": [
        "Creates a `UserProfile` PDA, linking a user's wallet to a specific admin service.",
        "",
        "# Arguments",
        "* `ctx` - The context, containing the user's wallet as a `Signer` and the target `admin_profile`.",
        "* `target_admin_pda` - The public key of the `AdminProfile` **PDA** this user is registering with.",
        "* `communication_pubkey` - The user's public key for off-chain communication."
      ],
      "discriminator": [
        177,
        174,
        64,
        198,
        117,
        117,
        97,
        139
      ],
      "accounts": [
        {
          "name": "authority",
          "docs": [
            "The `Signer` (the user's wallet) who will become the owner of the new `UserProfile`."
          ],
          "writable": true,
          "signer": true
        },
        {
          "name": "admin_profile",
          "docs": [
            "The `AdminProfile` PDA that this new user profile will be linked to.",
            "This account is not mutated, but it is read to ensure it exists and is a valid profile."
          ],
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  97,
                  100,
                  109,
                  105,
                  110
                ]
              },
              {
                "kind": "account",
                "path": "admin_profile.authority",
                "account": "AdminProfile"
              }
            ]
          }
        },
        {
          "name": "user_profile",
          "docs": [
            "The new `UserProfile` account to be initialized. Its address is a PDA",
            "derived from the user's `authority` key and the `admin_profile`'s PDA key.",
            "The `target_admin_pda` from the instruction must match `admin_profile.key()`."
          ],
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  117,
                  115,
                  101,
                  114
                ]
              },
              {
                "kind": "account",
                "path": "authority"
              },
              {
                "kind": "account",
                "path": "admin_profile"
              }
            ]
          }
        },
        {
          "name": "system_program",
          "docs": [
            "The Solana System Program, required by Anchor for account creation (`init`)."
          ],
          "address": "11111111111111111111111111111111"
        }
      ],
      "args": [
        {
          "name": "target_admin_pda",
          "type": "pubkey"
        },
        {
          "name": "communication_pubkey",
          "type": "pubkey"
        }
      ]
    },
    {
      "name": "user_deposit",
      "docs": [
        "Allows a user to deposit lamports into their `UserProfile` PDA to pre-fund",
        "future payments for a service.",
        "",
        "# Arguments",
        "* `ctx` - The context, containing the user's wallet as a `Signer`.",
        "* `amount` - The number of lamports to deposit."
      ],
      "discriminator": [
        186,
        198,
        140,
        233,
        129,
        39,
        98,
        153
      ],
      "accounts": [
        {
          "name": "authority",
          "docs": [
            "The `Signer` (the user's wallet) who must be the `authority` of the `user_profile`."
          ],
          "writable": true,
          "signer": true
        },
        {
          "name": "admin_profile",
          "docs": [
            "The `AdminProfile` associated with the `user_profile`. This is required",
            "to derive and verify the `user_profile` **PDA** address."
          ]
        },
        {
          "name": "user_profile",
          "docs": [
            "The `UserProfile` to receive the deposit. Constraints verify the PDA seeds",
            "(linking it to the `authority` and `admin_profile`) and ownership."
          ],
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  117,
                  115,
                  101,
                  114
                ]
              },
              {
                "kind": "account",
                "path": "authority"
              },
              {
                "kind": "account",
                "path": "admin_profile"
              }
            ]
          }
        },
        {
          "name": "system_program",
          "docs": [
            "The System Program, required for the underlying lamport transfer."
          ],
          "address": "11111111111111111111111111111111"
        }
      ],
      "args": [
        {
          "name": "amount",
          "type": "u64"
        }
      ]
    },
    {
      "name": "user_dispatch_command",
      "docs": [
        "The primary instruction for a user to call a service's API. It verifies a price",
        "signature from the admin's oracle and, if valid, transfers payment.",
        "",
        "# Arguments",
        "* `ctx` - The context, including the user's wallet, their profile, and the target admin profile.",
        "* `command_id` - The `u16` identifier of the service's command.",
        "* `price` - The price in lamports, as signed by the oracle.",
        "* `timestamp` - The Unix timestamp from the signed message, to prevent replay attacks.",
        "* `payload` - An opaque `Vec<u8>` for application-specific data."
      ],
      "discriminator": [
        13,
        153,
        252,
        84,
        58,
        75,
        71,
        30
      ],
      "accounts": [
        {
          "name": "authority",
          "docs": [
            "The `Signer` of the transaction (the user's wallet)."
          ],
          "signer": true
        },
        {
          "name": "user_profile",
          "docs": [
            "The user's profile PDA. Constraints ensure the `authority` is the owner",
            "and that this profile is linked to the provided `admin_profile` via its seeds."
          ],
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  117,
                  115,
                  101,
                  114
                ]
              },
              {
                "kind": "account",
                "path": "authority"
              },
              {
                "kind": "account",
                "path": "admin_profile"
              }
            ]
          }
        },
        {
          "name": "admin_profile",
          "docs": [
            "The target `AdminProfile` of the service being called. Its seeds are",
            "checked to ensure it's a valid profile created by this program."
          ],
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  97,
                  100,
                  109,
                  105,
                  110
                ]
              },
              {
                "kind": "account",
                "path": "admin_profile.authority",
                "account": "AdminProfile"
              }
            ]
          }
        },
        {
          "name": "instructions",
          "docs": [
            "The Instructions sysvar, used to verify the preceding instruction."
          ],
          "address": "Sysvar1nstructions1111111111111111111111111"
        }
      ],
      "args": [
        {
          "name": "command_id",
          "type": "u16"
        },
        {
          "name": "price",
          "type": "u64"
        },
        {
          "name": "timestamp",
          "type": "i64"
        },
        {
          "name": "payload",
          "type": "bytes"
        }
      ]
    },
    {
      "name": "user_request_unban",
      "docs": [
        "Allows a banned user to pay a fee to request an unban from the admin."
      ],
      "discriminator": [
        71,
        168,
        240,
        232,
        214,
        178,
        123,
        236
      ],
      "accounts": [
        {
          "name": "authority",
          "docs": [
            "The `Signer` (the user's wallet) who must be the `authority` of the `user_profile`."
          ],
          "writable": true,
          "signer": true
        },
        {
          "name": "admin_profile",
          "docs": [
            "The `AdminProfile` associated with the `user_profile`. It will receive the unban fee."
          ],
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  97,
                  100,
                  109,
                  105,
                  110
                ]
              },
              {
                "kind": "account",
                "path": "admin_profile.authority",
                "account": "AdminProfile"
              }
            ]
          }
        },
        {
          "name": "user_profile",
          "docs": [
            "The `UserProfile` requesting the unban."
          ],
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  117,
                  115,
                  101,
                  114
                ]
              },
              {
                "kind": "account",
                "path": "authority"
              },
              {
                "kind": "account",
                "path": "admin_profile"
              }
            ]
          }
        }
      ],
      "args": []
    },
    {
      "name": "user_update_comm_key",
      "docs": [
        "Updates the `communication_pubkey` for an existing `UserProfile`.",
        "",
        "# Arguments",
        "* `ctx` - The context, containing the user's wallet as a `Signer`.",
        "* `new_key` - The new `Pubkey` to set as the communication key."
      ],
      "discriminator": [
        17,
        74,
        114,
        230,
        29,
        87,
        243,
        236
      ],
      "accounts": [
        {
          "name": "authority",
          "docs": [
            "The `Signer` (the user's wallet) who must be the `authority` of the `user_profile`."
          ],
          "writable": true,
          "signer": true
        },
        {
          "name": "admin_profile",
          "docs": [
            "The `AdminProfile` associated with the `user_profile`."
          ]
        },
        {
          "name": "user_profile",
          "docs": [
            "The `UserProfile` account to be updated."
          ],
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  117,
                  115,
                  101,
                  114
                ]
              },
              {
                "kind": "account",
                "path": "authority"
              },
              {
                "kind": "account",
                "path": "admin_profile"
              }
            ]
          }
        }
      ],
      "args": [
        {
          "name": "new_key",
          "type": "pubkey"
        }
      ]
    },
    {
      "name": "user_withdraw",
      "docs": [
        "Allows a user to withdraw unspent funds from their `UserProfile`'s deposit balance.",
        "",
        "# Arguments",
        "* `ctx` - The context, containing the user's wallet as a `Signer` and the destination account.",
        "* `amount` - The number of lamports to withdraw."
      ],
      "discriminator": [
        53,
        254,
        26,
        242,
        119,
        237,
        73,
        33
      ],
      "accounts": [
        {
          "name": "authority",
          "docs": [
            "The `Signer` (the user's wallet) who must be the `authority` of the `user_profile`."
          ],
          "writable": true,
          "signer": true
        },
        {
          "name": "admin_profile",
          "docs": [
            "The `AdminProfile` associated with the `user_profile`."
          ]
        },
        {
          "name": "user_profile",
          "docs": [
            "The `UserProfile` from which funds will be withdrawn."
          ],
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  117,
                  115,
                  101,
                  114
                ]
              },
              {
                "kind": "account",
                "path": "authority"
              },
              {
                "kind": "account",
                "path": "admin_profile"
              }
            ]
          }
        },
        {
          "name": "destination",
          "docs": [
            "The account that will receive the withdrawn lamports."
          ],
          "writable": true
        }
      ],
      "args": [
        {
          "name": "amount",
          "type": "u64"
        }
      ]
    }
  ],
  "accounts": [
    {
      "name": "AdminProfile",
      "discriminator": [
        193,
        215,
        185,
        255,
        212,
        215,
        3,
        27
      ]
    },
    {
      "name": "UserProfile",
      "discriminator": [
        32,
        37,
        119,
        205,
        179,
        180,
        13,
        194
      ]
    }
  ],
  "events": [
    {
      "name": "AdminCommandDispatched",
      "discriminator": [
        166,
        184,
        206,
        3,
        169,
        90,
        226,
        54
      ]
    },
    {
      "name": "AdminConfigUpdated",
      "discriminator": [
        18,
        41,
        213,
        66,
        26,
        214,
        54,
        76
      ]
    },
    {
      "name": "AdminFundsWithdrawn",
      "discriminator": [
        215,
        184,
        92,
        198,
        219,
        243,
        225,
        83
      ]
    },
    {
      "name": "AdminProfileClosed",
      "discriminator": [
        193,
        41,
        136,
        160,
        164,
        117,
        77,
        210
      ]
    },
    {
      "name": "AdminProfileRegistered",
      "discriminator": [
        116,
        118,
        183,
        23,
        56,
        209,
        91,
        248
      ]
    },
    {
      "name": "AdminUnbanFeeUpdated",
      "discriminator": [
        187,
        26,
        215,
        2,
        11,
        64,
        123,
        134
      ]
    },
    {
      "name": "OffChainActionLogged",
      "discriminator": [
        146,
        249,
        144,
        144,
        227,
        249,
        229,
        0
      ]
    },
    {
      "name": "UserBanned",
      "discriminator": [
        115,
        195,
        2,
        181,
        111,
        76,
        236,
        164
      ]
    },
    {
      "name": "UserCommKeyUpdated",
      "discriminator": [
        80,
        219,
        183,
        255,
        168,
        92,
        108,
        111
      ]
    },
    {
      "name": "UserCommandDispatched",
      "discriminator": [
        209,
        210,
        184,
        200,
        27,
        130,
        144,
        37
      ]
    },
    {
      "name": "UserFundsDeposited",
      "discriminator": [
        43,
        35,
        29,
        47,
        249,
        253,
        102,
        25
      ]
    },
    {
      "name": "UserFundsWithdrawn",
      "discriminator": [
        71,
        217,
        163,
        1,
        117,
        77,
        110,
        65
      ]
    },
    {
      "name": "UserProfileClosed",
      "discriminator": [
        146,
        238,
        57,
        117,
        209,
        189,
        72,
        166
      ]
    },
    {
      "name": "UserProfileCreated",
      "discriminator": [
        175,
        83,
        79,
        167,
        6,
        194,
        72,
        125
      ]
    },
    {
      "name": "UserUnbanRequested",
      "discriminator": [
        234,
        199,
        37,
        140,
        230,
        54,
        16,
        31
      ]
    },
    {
      "name": "UserUnbanned",
      "discriminator": [
        128,
        216,
        43,
        19,
        23,
        106,
        239,
        190
      ]
    }
  ],
  "errors": [
    {
      "code": 6000,
      "name": "SignerUnauthorized",
      "msg": "Signer is not the authorized authority for this profile."
    },
    {
      "code": 6001,
      "name": "AdminMismatch",
      "msg": "Admin Mismatch: The provided UserProfile is not associated with the provided AdminProfile."
    },
    {
      "code": 6002,
      "name": "InsufficientDepositBalance",
      "msg": "Insufficient Deposit Balance: The user's deposit is not enough to pay for this command."
    },
    {
      "code": 6003,
      "name": "InsufficientAdminBalance",
      "msg": "Insufficient Admin Balance: The admin's internal balance is not enough to cover the withdrawal amount."
    },
    {
      "code": 6004,
      "name": "RentExemptViolation",
      "msg": "Rent-Exempt Violation: This transaction would leave the PDA with a balance below the rent-exempt minimum."
    },
    {
      "code": 6005,
      "name": "PayloadTooLarge",
      "msg": "Payload Too Large: The provided payload exceeds the maximum allowed size."
    },
    {
      "code": 6006,
      "name": "InstructionMismatch",
      "msg": "Instruction Mismatch: Expected an Ed25519 signature verification instruction."
    },
    {
      "code": 6007,
      "name": "SignatureVerificationFailed",
      "msg": "Signature Verification Failed: The oracle signature could not be verified."
    },
    {
      "code": 6008,
      "name": "InvalidOracleSigner",
      "msg": "Invalid Oracle Signer: The signer does not match the registered oracle authority."
    },
    {
      "code": 6009,
      "name": "TimestampTooOld",
      "msg": "Timestamp Too Old: The provided timestamp is outside the acceptable time window."
    },
    {
      "code": 6010,
      "name": "UserIsBanned",
      "msg": "User Is Banned: This action cannot be performed while the user is banned."
    },
    {
      "code": 6011,
      "name": "UserNotBanned",
      "msg": "User Not Banned: This user is not currently banned."
    },
    {
      "code": 6012,
      "name": "UnbanAlreadyRequested",
      "msg": "Unban Already Requested: An unban request is already pending for this user."
    },
    {
      "code": 6013,
      "name": "CannotBanSelf",
      "msg": "Cannot Ban Self: An admin cannot ban their own profile."
    }
  ],
  "types": [
    {
      "name": "AdminCommandDispatched",
      "docs": [
        "Emitted when an admin sends a command (notification) to a user."
      ],
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "sender",
            "docs": [
              "The public key of the admin's wallet (`authority`), who is the initiator of this command."
            ],
            "type": "pubkey"
          },
          {
            "name": "sender_admin_pda",
            "docs": [
              "The public key of the sender's `AdminProfile` PDA."
            ],
            "type": "pubkey"
          },
          {
            "name": "target_user_pda",
            "docs": [
              "The public key of the target `UserProfile` **PDA**."
            ],
            "type": "pubkey"
          },
          {
            "name": "command_id",
            "docs": [
              "A `u64` identifier for the specific command or notification being sent."
            ],
            "type": "u64"
          },
          {
            "name": "payload",
            "docs": [
              "An opaque byte array containing application-specific data for the command."
            ],
            "type": "bytes"
          },
          {
            "name": "ts",
            "docs": [
              "The Unix timestamp when the command was dispatched."
            ],
            "type": "i64"
          }
        ]
      }
    },
    {
      "name": "AdminConfigUpdated",
      "docs": [
        "Emitted when an admin updates their profile configuration."
      ],
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "authority",
            "docs": [
              "The public key of the admin's wallet (`authority`) that authorized this update."
            ],
            "type": "pubkey"
          },
          {
            "name": "admin_pda",
            "docs": [
              "The public key of the `AdminProfile` PDA that was updated."
            ],
            "type": "pubkey"
          },
          {
            "name": "new_oracle_authority",
            "docs": [
              "The new public key for the oracle."
            ],
            "type": "pubkey"
          },
          {
            "name": "new_timestamp_validity",
            "docs": [
              "The new validity period for oracle signatures in seconds."
            ],
            "type": "i64"
          },
          {
            "name": "new_communication_pubkey",
            "docs": [
              "The new public key for off-chain communication."
            ],
            "type": "pubkey"
          },
          {
            "name": "ts",
            "docs": [
              "The Unix timestamp of the update."
            ],
            "type": "i64"
          }
        ]
      }
    },
    {
      "name": "AdminFundsWithdrawn",
      "docs": [
        "Emitted when an admin withdraws earned funds from their profile's internal balance."
      ],
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "authority",
            "docs": [
              "The public key of the admin's wallet (`authority`) who initiated the withdrawal."
            ],
            "type": "pubkey"
          },
          {
            "name": "admin_pda",
            "docs": [
              "The public key of the `AdminProfile` PDA from which funds were withdrawn."
            ],
            "type": "pubkey"
          },
          {
            "name": "amount",
            "docs": [
              "The amount of lamports withdrawn from the `AdminProfile`'s internal balance."
            ],
            "type": "u64"
          },
          {
            "name": "destination",
            "docs": [
              "The public key of the wallet that received the withdrawn funds."
            ],
            "type": "pubkey"
          },
          {
            "name": "ts",
            "docs": [
              "The Unix timestamp of the withdrawal."
            ],
            "type": "i64"
          }
        ]
      }
    },
    {
      "name": "AdminProfile",
      "docs": [
        "Represents the on-chain profile for a Service Provider (an \"Admin\").",
        "This PDA holds the service's configuration, and serves as a treasury for",
        "collected fees. Its address is derived from the admin's wallet key."
      ],
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "authority",
            "docs": [
              "The public key of the admin's wallet, which is the sole `authority`",
              "allowed to manage this profile (e.g., withdraw funds)."
            ],
            "type": "pubkey"
          },
          {
            "name": "communication_pubkey",
            "docs": [
              "A public key provided by the admin for secure off-chain key exchange,",
              "typically used for hybrid encryption with users."
            ],
            "type": "pubkey"
          },
          {
            "name": "oracle_authority",
            "docs": [
              "The public key of the off-chain oracle responsible for signing price data.",
              "The program will only accept price information signed by this authority."
            ],
            "type": "pubkey"
          },
          {
            "name": "timestamp_validity_seconds",
            "docs": [
              "The duration in seconds for which an oracle's signature is considered valid.",
              "This helps prevent replay attacks with old price data."
            ],
            "type": "i64"
          },
          {
            "name": "balance",
            "docs": [
              "The internal balance in lamports where fees from paid user commands are collected.",
              "This balance can be withdrawn by the admin via the `admin_withdraw` instruction."
            ],
            "type": "u64"
          },
          {
            "name": "unban_fee",
            "docs": [
              "The fee in lamports that a user must pay to request an unban.",
              "This can be configured by the admin."
            ],
            "type": "u64"
          }
        ]
      }
    },
    {
      "name": "AdminProfileClosed",
      "docs": [
        "Emitted when an `AdminProfile` PDA is closed, effectively unregistering the service."
      ],
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "authority",
            "docs": [
              "The public key of the admin's wallet (`authority`) whose profile was closed."
            ],
            "type": "pubkey"
          },
          {
            "name": "admin_pda",
            "docs": [
              "The public key of the `AdminProfile` **PDA** that was closed."
            ],
            "type": "pubkey"
          },
          {
            "name": "ts",
            "docs": [
              "The Unix timestamp of the account closure."
            ],
            "type": "i64"
          }
        ]
      }
    },
    {
      "name": "AdminProfileRegistered",
      "docs": [
        "Emitted when a new AdminProfile PDA is created.",
        "This signifies that a new service has been registered on the protocol."
      ],
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "authority",
            "docs": [
              "The public key of the admin's wallet (`authority`), which serves as the unique owner",
              "and signer for the `AdminProfile` PDA."
            ],
            "type": "pubkey"
          },
          {
            "name": "admin_pda",
            "docs": [
              "The public key of the `AdminProfile` PDA that was registered."
            ],
            "type": "pubkey"
          },
          {
            "name": "communication_pubkey",
            "docs": [
              "The public key provided by the admin for secure off-chain communication,",
              "typically used for hybrid encryption."
            ],
            "type": "pubkey"
          },
          {
            "name": "ts",
            "docs": [
              "The Unix timestamp (in seconds) when the registration occurred."
            ],
            "type": "i64"
          }
        ]
      }
    },
    {
      "name": "AdminUnbanFeeUpdated",
      "docs": [
        "Emitted when an admin updates the unban fee for their service."
      ],
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "authority",
            "docs": [
              "The public key of the admin's wallet (`authority`) that authorized this update."
            ],
            "type": "pubkey"
          },
          {
            "name": "admin_pda",
            "docs": [
              "The public key of the `AdminProfile` PDA that was updated."
            ],
            "type": "pubkey"
          },
          {
            "name": "new_unban_fee",
            "docs": [
              "The new fee in lamports for requesting an unban."
            ],
            "type": "u64"
          },
          {
            "name": "ts",
            "docs": [
              "The Unix timestamp of the update."
            ],
            "type": "i64"
          }
        ]
      }
    },
    {
      "name": "OffChainActionLogged",
      "docs": [
        "A generic event for logging significant off-chain actions for auditing purposes."
      ],
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "actor",
            "docs": [
              "The public key of the wallet (`authority` of either a user or admin) that performed the off-chain action."
            ],
            "type": "pubkey"
          },
          {
            "name": "user_profile_pda",
            "docs": [
              "The public key of the `UserProfile` PDA involved in this action."
            ],
            "type": "pubkey"
          },
          {
            "name": "admin_profile_pda",
            "docs": [
              "The public key of the `AdminProfile` PDA involved in this action."
            ],
            "type": "pubkey"
          },
          {
            "name": "session_id",
            "docs": [
              "A `u64` identifier used to correlate multiple off-chain actions to a single on-chain session."
            ],
            "type": "u64"
          },
          {
            "name": "action_code",
            "docs": [
              "A `u16` code representing the specific type of off-chain action taken (e.g., 200 for HTTP OK)."
            ],
            "type": "u16"
          },
          {
            "name": "ts",
            "docs": [
              "The Unix timestamp of the logged action."
            ],
            "type": "i64"
          }
        ]
      }
    },
    {
      "name": "UserBanned",
      "docs": [
        "Emitted when an admin bans a user."
      ],
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "admin_authority",
            "docs": [
              "The public key of the admin's wallet (`authority`) who initiated the ban."
            ],
            "type": "pubkey"
          },
          {
            "name": "admin_pda",
            "docs": [
              "The public key of the `AdminProfile` PDA of the admin."
            ],
            "type": "pubkey"
          },
          {
            "name": "user_profile_pda",
            "docs": [
              "The public key of the `UserProfile` PDA that was banned."
            ],
            "type": "pubkey"
          },
          {
            "name": "ts",
            "docs": [
              "The Unix timestamp of the ban."
            ],
            "type": "i64"
          }
        ]
      }
    },
    {
      "name": "UserCommKeyUpdated",
      "docs": [
        "Emitted when a user updates their off-chain communication public key."
      ],
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "authority",
            "docs": [
              "The public key of the user's wallet (`authority`) who authorized this update."
            ],
            "type": "pubkey"
          },
          {
            "name": "user_profile_pda",
            "docs": [
              "The PDA of the user profile that was updated."
            ],
            "type": "pubkey"
          },
          {
            "name": "new_comm_pubkey",
            "docs": [
              "The new communication public key for the `UserProfile`."
            ],
            "type": "pubkey"
          },
          {
            "name": "ts",
            "docs": [
              "The Unix timestamp of the update."
            ],
            "type": "i64"
          }
        ]
      }
    },
    {
      "name": "UserCommandDispatched",
      "docs": [
        "Emitted when a user calls a service's command, potentially a paid one."
      ],
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "sender",
            "docs": [
              "The public key of the user's wallet (`authority`), who is the initiator of the command."
            ],
            "type": "pubkey"
          },
          {
            "name": "sender_user_pda",
            "docs": [
              "The public key of the sender's `UserProfile` PDA."
            ],
            "type": "pubkey"
          },
          {
            "name": "target_admin_pda",
            "docs": [
              "The public key of the target `AdminProfile` **PDA**."
            ],
            "type": "pubkey"
          },
          {
            "name": "command_id",
            "docs": [
              "A `u16` identifier for the specific command being executed."
            ],
            "type": "u16"
          },
          {
            "name": "price_paid",
            "docs": [
              "The amount in lamports deducted from the user's deposit balance for this command (0 if free)."
            ],
            "type": "u64"
          },
          {
            "name": "payload",
            "docs": [
              "An opaque byte array containing application-specific data for the command."
            ],
            "type": "bytes"
          },
          {
            "name": "ts",
            "docs": [
              "The Unix timestamp when the command was dispatched."
            ],
            "type": "i64"
          }
        ]
      }
    },
    {
      "name": "UserFundsDeposited",
      "docs": [
        "Emitted when a user deposits funds into their `UserProfile` to pay for services."
      ],
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "authority",
            "docs": [
              "The public key of the user's wallet (`authority`) who made the deposit."
            ],
            "type": "pubkey"
          },
          {
            "name": "user_profile_pda",
            "docs": [
              "The PDA of the user profile that received the deposit."
            ],
            "type": "pubkey"
          },
          {
            "name": "amount",
            "docs": [
              "The amount of lamports deposited into the `UserProfile`."
            ],
            "type": "u64"
          },
          {
            "name": "new_deposit_balance",
            "docs": [
              "The user's new total `deposit_balance` after this transaction."
            ],
            "type": "u64"
          },
          {
            "name": "ts",
            "docs": [
              "The Unix timestamp of the deposit."
            ],
            "type": "i64"
          }
        ]
      }
    },
    {
      "name": "UserFundsWithdrawn",
      "docs": [
        "Emitted when a user withdraws unspent funds from their `UserProfile`."
      ],
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "authority",
            "docs": [
              "The public key of the user's wallet (`authority`) who made the withdrawal."
            ],
            "type": "pubkey"
          },
          {
            "name": "user_profile_pda",
            "docs": [
              "The PDA of the user profile from which funds were withdrawn."
            ],
            "type": "pubkey"
          },
          {
            "name": "amount",
            "docs": [
              "The amount of lamports withdrawn from the `UserProfile`."
            ],
            "type": "u64"
          },
          {
            "name": "destination",
            "docs": [
              "The public key of the wallet that received the funds."
            ],
            "type": "pubkey"
          },
          {
            "name": "new_deposit_balance",
            "docs": [
              "The user's new total `deposit_balance` after this transaction."
            ],
            "type": "u64"
          },
          {
            "name": "ts",
            "docs": [
              "The Unix timestamp of the withdrawal."
            ],
            "type": "i64"
          }
        ]
      }
    },
    {
      "name": "UserProfile",
      "docs": [
        "Represents a user's on-chain profile for a *specific* Admin service.",
        "A single user wallet (`authority`) can have multiple `UserProfile` PDAs, one for each",
        "service they interact with. This PDA holds the user's prepaid balance for that service."
      ],
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "authority",
            "docs": [
              "The public key of the user's wallet, which is the sole `authority`",
              "allowed to manage this profile (e.g., deposit/withdraw funds, close profile)."
            ],
            "type": "pubkey"
          },
          {
            "name": "communication_pubkey",
            "docs": [
              "A public key provided by the user for secure off-chain key exchange."
            ],
            "type": "pubkey"
          },
          {
            "name": "admin_profile_on_creation",
            "docs": [
              "The public key of the `AdminProfile` **PDA** this user profile was created for.",
              "This field permanently links the user's profile to a specific service."
            ],
            "type": "pubkey"
          },
          {
            "name": "deposit_balance",
            "docs": [
              "The user's prepaid balance in lamports for this specific service. This balance",
              "is debited by the `user_dispatch_command` instruction."
            ],
            "type": "u64"
          },
          {
            "name": "banned",
            "docs": [
              "A flag indicating whether the user is banned from using the service.",
              "If true, most user-initiated actions will be blocked."
            ],
            "type": "bool"
          },
          {
            "name": "unban_requested",
            "docs": [
              "A flag indicating that the user has paid the fee and requested to be unbanned.",
              "This does not automatically lift the ban."
            ],
            "type": "bool"
          }
        ]
      }
    },
    {
      "name": "UserProfileClosed",
      "docs": [
        "Emitted when a `UserProfile` PDA is closed."
      ],
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "authority",
            "docs": [
              "The public key of the user's wallet (`authority`) whose profile was closed."
            ],
            "type": "pubkey"
          },
          {
            "name": "user_pda",
            "docs": [
              "The public key of the `UserProfile` PDA that was closed."
            ],
            "type": "pubkey"
          },
          {
            "name": "admin_pda",
            "docs": [
              "The public key of the `AdminProfile` **PDA** this profile was linked to."
            ],
            "type": "pubkey"
          },
          {
            "name": "ts",
            "docs": [
              "The Unix timestamp of the account closure."
            ],
            "type": "i64"
          }
        ]
      }
    },
    {
      "name": "UserProfileCreated",
      "docs": [
        "Emitted when a new `UserProfile` PDA is created, linking a user to a specific admin."
      ],
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "authority",
            "docs": [
              "The public key of the user's wallet (`authority`), which is the sole owner of this `UserProfile` PDA."
            ],
            "type": "pubkey"
          },
          {
            "name": "user_pda",
            "docs": [
              "The public key of the `UserProfile` PDA that was created."
            ],
            "type": "pubkey"
          },
          {
            "name": "target_admin_pda",
            "docs": [
              "The public key of the `AdminProfile` **PDA** that this `UserProfile` is associated with."
            ],
            "type": "pubkey"
          },
          {
            "name": "communication_pubkey",
            "docs": [
              "The public key provided by the user for secure off-chain communication."
            ],
            "type": "pubkey"
          },
          {
            "name": "ts",
            "docs": [
              "The Unix timestamp of the profile creation."
            ],
            "type": "i64"
          }
        ]
      }
    },
    {
      "name": "UserUnbanRequested",
      "docs": [
        "Emitted when a user pays the fee to request an unban."
      ],
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "user_authority",
            "docs": [
              "The public key of the user's wallet (`authority`) who requested the unban."
            ],
            "type": "pubkey"
          },
          {
            "name": "user_profile_pda",
            "docs": [
              "The public key of the `UserProfile` PDA."
            ],
            "type": "pubkey"
          },
          {
            "name": "admin_pda",
            "docs": [
              "The public key of the `AdminProfile` PDA this user is linked to."
            ],
            "type": "pubkey"
          },
          {
            "name": "fee_paid",
            "docs": [
              "The fee paid by the user in lamports."
            ],
            "type": "u64"
          },
          {
            "name": "ts",
            "docs": [
              "The Unix timestamp of the request."
            ],
            "type": "i64"
          }
        ]
      }
    },
    {
      "name": "UserUnbanned",
      "docs": [
        "Emitted when an admin unbans a user."
      ],
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "admin_authority",
            "docs": [
              "The public key of the admin's wallet (`authority`) who lifted the ban."
            ],
            "type": "pubkey"
          },
          {
            "name": "admin_pda",
            "docs": [
              "The public key of the `AdminProfile` PDA of the admin."
            ],
            "type": "pubkey"
          },
          {
            "name": "user_profile_pda",
            "docs": [
              "The public key of the `UserProfile` PDA that was unbanned."
            ],
            "type": "pubkey"
          },
          {
            "name": "ts",
            "docs": [
              "The Unix timestamp of the unban."
            ],
            "type": "i64"
          }
        ]
      }
    }
  ]
}
services:
  builder:
    # This service is a one-off builder.
    # It starts, builds all artifacts, and then exits.
    # Other services depend on it and start afterward.
    # To re-run the build, use `docker compose up --build --force-recreate builder`
    build:
      context: .
      dockerfile: Dockerfile.rust.builder
      args:
        USER_ID: ${UID:-1000}
        GROUP_ID: ${GID:-1000}
    profiles: ["builder", "full"]
    volumes:
      - ./artifacts:/project/artifacts
      - ./target:/project/target
      - ./keys:/keys
    working_dir: /project
    command: /usr/local/bin/build_and_deploy.sh --build-only

  solana-validator:
    build:
      context: .
      dockerfile: Dockerfile.validator
    profiles: ["validator", "deploy", "full"]
    ports:
      - "8899:8899" # RPC
      - "8900:8900" # Websocket
      - "8901:8901" # Faucet
    volumes:
      - solana-ledger:/ledger
    command: solana-test-validator --ledger /ledger --reset

  bridge-program:
    build:
      context: .
      dockerfile: Dockerfile.rust.builder
      args:
        USER_ID: ${UID:-1000}
        GROUP_ID: ${GID:-1000}
    profiles: ["deploy", "full"]
    depends_on: # Depends on the validator AND a successful build
      solana-validator:
        condition: service_started
      builder:
        condition: service_completed_successfully
    volumes:
      - ./artifacts:/project/artifacts
      - ./keys:/keys
    environment:
      - PROGRAM_KEYPAIR_PATH=/keys/my_program-keypair.json
      - SOLANA_RPC_URL=http://solana-validator:8899
    working_dir: /project
    # The command now just deploys the finished .so file without running a new build.
    command: >
      bash -c "
        echo '--- [BRIDGE-PROGRAM] Waiting for validator...';
        while ! solana --url http://solana-validator:8899 ping --no-address-labels > /dev/null 2>&1; do sleep 1; done;
        echo 'Validator ready. Deploying program...';
        solana program deploy /project/artifacts/w3b2_solana_program.so --program-id /keys/my_program-keypair.json --url http://solana-validator:8899;
      "

  gateway:
    build:
      context: .
      dockerfile: Dockerfile.rust.builder
      args:
        USER_ID: ${UID:-1000}
        GROUP_ID: ${GID:-1000}
    profiles: ["gateway", "full"]
    depends_on: # Depends on the deployed program AND a successful build
      bridge-program:
        condition: service_completed_successfully
      builder:
        condition: service_completed_successfully
    ports:
      - "50051:50051"
    volumes:
      - ./artifacts:/project/artifacts
      - ./target:/project/target
      - ./keys:/keys
      - ./w3b2-solana-gateway/config.toml:/project/config.toml
    environment:
      - HOST=0.0.0.0
      - PORT=50051
      - RPC_URL=http://solana-validator:8899
      - WS_URL=ws://solana-validator:8900
      - PROGRAM_ID=${PROGRAM_ID:-}
    command: >
      # Now we can be sure the binary exists because we depend on the builder.
      bash -c "
        GATEWAY_BINARY=/project/target/release/w3b2-solana-gateway
        if [ -z \"$$PROGRAM_ID\" ]; then
          export PROGRAM_ID=$$(cat /project/artifacts/w3b2_solana_program.json | jq -r .metadata.address);
        fi;
        echo 'Starting gateway with PROGRAM_ID='$$PROGRAM_ID;
        $$GATEWAY_BINARY --config /project/config.toml
      "

  docs:
    build:
      context: .
      dockerfile: Dockerfile.docs
    profiles: ["docs", "full"]
    ports:
      - "8000:8000"
    volumes:
      - ./docs:/project/docs
      - ./mkdocs.yml:/project/mkdocs.yml

volumes:
  solana-ledger:
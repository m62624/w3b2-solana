syntax = "proto3";

package w3b2.protocol.gateway;

import "google/protobuf/empty.proto";
import "types.proto";

// ===================================================================
// == Service Definition: BridgeGatewayService
// ===================================================================
/// The gRPC service for the W3B2 toolset, providing a non-custodial
/// interface for interacting with the on-chain program.
///
/// ## Transaction Workflow
/// 1. **Prepare**: The client calls a `prepare_*` method (e.g.,
///    `PrepareUserDeposit`).
/// 2. **Receive**: The server returns an `UnsignedTransactionResponse`
///    containing the serialized transaction *message*.
/// 3. **Sign**: The client adds a recent blockhash to the message and signs it
///    locally with its private key.
/// 4. **Submit**: The client calls `SubmitTransaction` with the serialized,
///    signed transaction.
///
/// ## Event Streaming Workflow
/// The gateway provides two types of event streams for maximum flexibility:
/// - **History (`Get...EventHistory`)**: A finite stream that sends all
///   historical events for a PDA and then closes.
/// - **Live (`Stream...LiveEvents`)**: A persistent stream that sends only new,
///   real-time events.
///
/// A typical client will call both methods concurrently to get a complete and
/// up-to-date view of an account's state.
service BridgeGatewayService {

  // ===================================================================
  // == Event Streaming RPCs
  // ===================================================================

  /// Subscribes to a stream of **live** events for a specific UserProfile PDA.
  /// This stream does NOT include historical events. For history, use
  /// `GetUserEventHistory`. The stream remains active until the client
  /// disconnects or calls `Unsubscribe`.
  rpc StreamUserLiveEvents(ListenRequest) returns (stream EventStreamItem);

  /// Subscribes to a stream of **live** events for a specific AdminProfile PDA.
  /// For historical events, use `GetAdminEventHistory`.
  rpc StreamAdminLiveEvents(ListenRequest) returns (stream EventStreamItem);

  /// Fetches all **historical** events for a specific UserProfile PDA.
  /// The stream will close automatically after all historical events have been
  /// sent.
  rpc GetUserEventHistory(ListenRequest) returns (stream EventStreamItem);

  /// Fetches all **historical** events for a specific AdminProfile PDA.
  /// The stream will close automatically after all historical events have been
  /// sent.
  rpc GetAdminEventHistory(ListenRequest) returns (stream EventStreamItem);

  /// Manually unsubscribes a client from an active event stream using its
  /// PDA. This terminates the corresponding `Stream...LiveEvents` call.
  rpc Unsubscribe(UnsubscribeRequest) returns (google.protobuf.Empty);

  // ===================================================================
  // == Transaction Preparation RPCs
  // ===================================================================

  // --- Admin ---
  rpc PrepareAdminRegisterProfile(PrepareAdminRegisterProfileRequest)
      returns (UnsignedTransactionResponse);
  rpc PrepareAdminSetConfig(PrepareAdminSetConfigRequest)
      returns (UnsignedTransactionResponse);
  rpc PrepareAdminWithdraw(PrepareAdminWithdrawRequest)
      returns (UnsignedTransactionResponse);
  rpc PrepareAdminCloseProfile(PrepareAdminCloseProfileRequest)
      returns (UnsignedTransactionResponse);
  rpc PrepareAdminDispatchCommand(PrepareAdminDispatchCommandRequest)
      returns (UnsignedTransactionResponse);
  rpc PrepareAdminBanUser(PrepareAdminBanUserRequest)
      returns (UnsignedTransactionResponse);
  rpc PrepareAdminUnbanUser(PrepareAdminUnbanUserRequest)
      returns (UnsignedTransactionResponse);

  // --- User ---
  rpc PrepareUserCreateProfile(PrepareUserCreateProfileRequest)
      returns (UnsignedTransactionResponse);
  rpc PrepareUserUpdateCommKey(PrepareUserUpdateCommKeyRequest)
      returns (UnsignedTransactionResponse);
  rpc PrepareUserDeposit(PrepareUserDepositRequest)
      returns (UnsignedTransactionResponse);
  rpc PrepareUserWithdraw(PrepareUserWithdrawRequest)
      returns (UnsignedTransactionResponse);
  rpc PrepareUserCloseProfile(PrepareUserCloseProfileRequest)
      returns (UnsignedTransactionResponse);
  rpc PrepareUserDispatchCommand(PrepareUserDispatchCommandRequest)
      returns (UnsignedTransactionResponse);
  rpc PrepareUserRequestUnban(PrepareUserRequestUnbanRequest)
      returns (UnsignedTransactionResponse);

  // --- Operational ---
  rpc PrepareLogAction(PrepareLogActionRequest)
      returns (UnsignedTransactionResponse);

  // ===================================================================
  // == Transaction Submission RPC
  // ===================================================================

  /// Submits a client-signed transaction to the Solana network.
  rpc SubmitTransaction(SubmitTransactionRequest) returns (TransactionResponse);

  // ===================================================================
  // == Utility RPCs
  // ===================================================================
  /// Fetches the latest blockhash from the Solana network.
  rpc GetLatestBlockhash(google.protobuf.Empty) returns (BlockhashResponse);
}
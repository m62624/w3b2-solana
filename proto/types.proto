syntax = "proto3";

// ===================================================================
// == Package for Gateway-specific API messages
// ===================================================================
package w3b2.protocol.gateway;

// --- Core RPC Message Types for Transactions ---

/// A response containing a serialized, unsigned transaction message.
message UnsignedTransactionResponse {
  /// The serialized `Message` part of a Solana transaction. The client must
  /// add a recent blockhash to this message before signing.
  bytes unsigned_tx_message = 1;
}

/// A request to submit a fully signed transaction.
message SubmitTransactionRequest {
  /// The serialized, signed `Transaction`.
  bytes signed_tx = 1;
}

/// A response containing the signature of a submitted transaction.
message TransactionResponse {
  /// The base-58 encoded transaction signature.
  string signature = 1;
}

/// A response containing the latest blockhash.
message BlockhashResponse {
  /// The raw 32 bytes of the latest blockhash.
  bytes blockhash = 1;
}

/// A request to prepare an `admin_register_profile` transaction.
message PrepareAdminRegisterProfileRequest {
  string authority_pubkey = 1;
  string communication_pubkey = 2;
}

/// A request to prepare an `admin_set_config` transaction.
message PrepareAdminSetConfigRequest {
  string authority_pubkey = 1;
  optional string new_oracle_authority = 2;
  optional int64 new_timestamp_validity = 3;
  optional string new_communication_pubkey = 4;
  optional uint64 new_unban_fee = 5;
}

/// A request to prepare an `admin_withdraw` transaction.
message PrepareAdminWithdrawRequest {
  string authority_pubkey = 1;
  uint64 amount = 2;
  string destination = 3;
}

/// A request to prepare an `admin_close_profile` transaction.
message PrepareAdminCloseProfileRequest { string authority_pubkey = 1; }

/// A request to prepare an `admin_dispatch_command` transaction.
message PrepareAdminDispatchCommandRequest {
  string authority_pubkey = 1;
  string target_user_profile_pda = 2;
  uint64 command_id = 3;
  bytes payload = 4;
}

/// A request to prepare an `admin_ban_user` transaction.
message PrepareAdminBanUserRequest {
  string authority_pubkey = 1;
  string target_user_profile_pda = 2;
}

/// A request to prepare an `admin_unban_user` transaction.
message PrepareAdminUnbanUserRequest {
  string authority_pubkey = 1;
  string target_user_profile_pda = 2;
}

/// A request to prepare a `user_create_profile` transaction.
message PrepareUserCreateProfileRequest {
  string authority_pubkey = 1;
  string target_admin_pda = 2;
  string communication_pubkey = 3;
}

/// A request to prepare a `user_update_comm_key` transaction.
message PrepareUserUpdateCommKeyRequest {
  string authority_pubkey = 1;
  string admin_profile_pda = 2;
  string new_key = 3;
}

/// A request to prepare a `user_deposit` transaction.
message PrepareUserDepositRequest {
  string authority_pubkey = 1;
  string admin_profile_pda = 2;
  uint64 amount = 3;
}

/// A request to prepare a `user_withdraw` transaction.
message PrepareUserWithdrawRequest {
  string authority_pubkey = 1;
  string admin_profile_pda = 2;
  uint64 amount = 3;
  string destination = 4;
}

/// A request to prepare a `user_close_profile` transaction.
message PrepareUserCloseProfileRequest {
  string authority_pubkey = 1;
  string admin_profile_pda = 2;
}

/// A request to prepare a `user_dispatch_command` transaction.
message PrepareUserDispatchCommandRequest {
  string authority_pubkey = 1;
  string target_admin_pda = 2;
  uint32 command_id = 3;
  uint64 price = 4;
  int64 timestamp = 5;
  bytes payload = 6;
  string oracle_pubkey = 7;
  bytes oracle_signature = 8;
}

/// A request to prepare a `user_request_unban` transaction.
message PrepareUserRequestUnbanRequest {
  string authority_pubkey = 1;
  string admin_profile_pda = 2;
}

/// A request to prepare a `log_action` transaction.
message PrepareLogActionRequest {
  string authority_pubkey = 1;
  string user_profile_pda = 2;
  string admin_profile_pda = 3;
  uint64 session_id = 4;
  uint32 action_code = 5;
}

// --- Messages for Event Streaming ---

/// A request to start listening for events for a specific PDA.
message ListenRequest {
  /// The public key of the `UserProfile` or `AdminProfile` **PDA** to monitor.
  string pda = 1;
}

/// A single item in the event stream sent from server to client.
message EventStreamItem {
  /// The source of the event (historical or real-time).
  EventSource source = 1;
  /// The actual on-chain event data.
  BridgeEvent event = 2;
}

/// A request to manually unsubscribe from an event stream.
message UnsubscribeRequest {
  /// The PDA of the subscription to terminate.
  string pda = 1;
}

/// Indicates the origin of a streamed event.
enum EventSource {
  UNKNOWN = 0;
  LIVE = 1;
  CATCHUP = 2;
}

// --- Event Messages (Mirrors of on-chain events) ---

/// Emitted when a new `AdminProfile` PDA is created.
message AdminProfileRegistered {
  /// The public key of the admin's wallet (`authority`).
  string authority = 1;
  /// The public key of the `AdminProfile` PDA that was registered.
  string admin_pda = 2;
  /// The public key for off-chain communication.
  string communication_pubkey = 3;
  /// The Unix timestamp of the registration.
  int64 ts = 4;
}
/// Emitted when an admin withdraws earned funds.
message AdminFundsWithdrawn {
  /// The public key of the admin's wallet (`authority`).
  string authority = 1;
  /// The public key of the `AdminProfile` PDA from which funds were withdrawn.
  string admin_pda = 2;
  /// The amount of lamports withdrawn.
  uint64 amount = 3;
  /// The public key of the wallet that received the funds.
  string destination = 4;
  /// The Unix timestamp of the withdrawal.
  int64 ts = 5;
}
/// Emitted when an `AdminProfile` PDA is closed.
message AdminProfileClosed {
  /// The public key of the admin's wallet (`authority`).
  string authority = 1;
  /// The public key of the `AdminProfile` **PDA** that was closed.
  string admin_pda = 2;
  /// The Unix timestamp of the closure.
  int64 ts = 3;
}
/// Emitted when an admin sends a command to a user.
message AdminCommandDispatched {
  /// The public key of the sender admin's wallet (`authority`).
  string sender = 1;
  /// The public key of the sender's `AdminProfile` PDA.
  string sender_admin_pda = 2;
  /// The public key of the target `UserProfile` **PDA**.
  string target_user_pda = 3;
  /// The `u64` identifier for the command.
  uint32 command_id = 4;
  /// An opaque byte array for application-specific data.
  bytes payload = 5;
  /// The Unix timestamp of the dispatch.
  int64 ts = 6;
}

// --- User Events ---

/// Emitted when a new `UserProfile` PDA is created.
message UserProfileCreated {
  /// The public key of the user's wallet (`authority`).
  string authority = 1;
  /// The public key of the `UserProfile` PDA that was created.
  string user_pda = 2;
  /// The public key of the `AdminProfile` **PDA** this profile is linked to.
  string target_admin_pda = 3;
  /// The public key for off-chain communication.
  string communication_pubkey = 4;
  /// The Unix timestamp of the creation.
  int64 ts = 5;
}
/// Emitted when a user updates their communication key.
message UserCommKeyUpdated {
  /// The public key of the user's wallet (`authority`).
  string authority = 1;
  /// The public key of the `UserProfile` **PDA** that was updated.
  string user_profile_pda = 2;
  /// The new communication public key.
  string new_comm_pubkey = 3;
  /// The Unix timestamp of the update.
  int64 ts = 4;
}
/// Emitted when a user deposits funds into their profile.
message UserFundsDeposited {
  /// The public key of the user's wallet (`authority`).
  string authority = 1;
  /// The public key of the `UserProfile` **PDA** that received the deposit.
  string user_profile_pda = 2;
  /// The amount of lamports deposited in this transaction.
  uint64 amount = 3;
  /// The user's new total `deposit_balance` after this deposit.
  uint64 new_deposit_balance = 4;
  /// The Unix timestamp of the deposit.
  int64 ts = 5;
}
/// Emitted when a user withdraws funds from their profile.
message UserFundsWithdrawn {
  /// The public key of the user's wallet (`authority`).
  string authority = 1;
  /// The public key of the `UserProfile` **PDA** from which funds were
  /// withdrawn.
  string user_profile_pda = 2;
  /// The amount of lamports withdrawn.
  uint64 amount = 3;
  /// The public key of the wallet that received the funds.
  string destination = 4;
  /// The user's new total `deposit_balance` after this withdrawal.
  uint64 new_deposit_balance = 5;
  /// The Unix timestamp of the withdrawal.
  int64 ts = 6;
}

/// Emitted when a `UserProfile` PDA is closed.
message UserProfileClosed {
  /// The public key of the user's wallet (`authority`).
  string authority = 1;
  /// The public key of the `UserProfile` PDA that was closed.
  string user_pda = 2;
  /// The public key of the `AdminProfile` **PDA** this profile was linked to.
  /// // This field is crucial for the admin to get notified.
  string admin_pda = 3;
  /// The Unix timestamp of the closure.
  int64 ts = 4;
}

// --- Operational Events ---

/// Emitted when a user calls a service's command.
message UserCommandDispatched {
  /// The public key of the sender user's wallet (`authority`).
  string sender = 1;
  /// The public key of the sender's `UserProfile` PDA.
  string sender_user_pda = 2;
  /// The public key of the target `AdminProfile` **PDA**.
  string target_admin_pda = 3;
  /// The `u16` identifier for the command being executed.
  uint32 command_id = 4;
  /// The amount in lamports paid for this command (0 if free).
  uint64 price_paid = 5;
  /// An opaque byte array for application-specific data.
  bytes payload = 6;
  /// The Unix timestamp of the dispatch.
  int64 ts = 7;
}
/// A generic event for logging significant off-chain actions.
message OffChainActionLogged {
  /// The public key of the actor's wallet (user or admin).
  string actor = 1;
  /// The public key of the `UserProfile` PDA involved in this action.
  string user_profile_pda = 2;
  /// The public key of the `AdminProfile` PDA involved in this action.
  string admin_profile_pda = 3;
  /// A `u64` identifier to correlate actions to a session.
  uint64 session_id = 4;
  /// A `u16` code representing the specific off-chain action (e.g., HTTP status
  /// code).
  uint32 action_code = 5;
  /// The Unix timestamp of the logged action.
  int64 ts = 6;
}

// --- Wrapper Event ---

/// A generic wrapper that contains one of any possible event types from the
/// program. This is used for unified event streams.
message BridgeEvent {
  oneof event {
    AdminProfileRegistered admin_profile_registered = 1;
    AdminConfigUpdated admin_config_updated = 3;
    AdminFundsWithdrawn admin_funds_withdrawn = 4;
    AdminProfileClosed admin_profile_closed = 5;
    AdminCommandDispatched admin_command_dispatched = 6;
    UserProfileCreated user_profile_created = 7;
    UserCommKeyUpdated user_comm_key_updated = 8;
    UserFundsDeposited user_funds_deposited = 9;
    UserFundsWithdrawn user_funds_withdrawn = 10;
    UserProfileClosed user_profile_closed = 11;
    UserCommandDispatched user_command_dispatched = 12;
    OffChainActionLogged off_chain_action_logged = 13;
    AdminUnbanFeeUpdated admin_unban_fee_updated = 14;
    UserBanned user_banned = 15;
    UserUnbanned user_unbanned = 16;
    UserUnbanRequested user_unban_requested = 17;
  }
}

/// Emitted when an admin updates their profile configuration.
message AdminConfigUpdated {
  string authority = 1;
  string admin_pda = 2;
  string new_oracle_authority = 3;
  int64 new_timestamp_validity = 4;
  string new_communication_pubkey = 5;
  int64 ts = 6;
}

/// Emitted when an admin updates the unban fee.
message AdminUnbanFeeUpdated {
  /// The public key of the admin's wallet (`authority`).
  string authority = 1;
  /// The public key of the `AdminProfile` PDA that was updated.
  string admin_pda = 2;
  /// The new fee in lamports for requesting an unban.
  uint64 new_unban_fee = 3;
  /// The Unix timestamp of the update.
  int64 ts = 4;
}

/// Emitted when a user is banned by an admin.
message UserBanned {
  /// The public key of the admin's wallet (`authority`).
  string admin_authority = 1;
  /// The public key of the `AdminProfile` PDA.
  string admin_pda = 2;
  /// The public key of the `UserProfile` PDA that was banned.
  string user_profile_pda = 3;
  /// The Unix timestamp of the ban.
  int64 ts = 4;
}

/// Emitted when a user is unbanned by an admin.
message UserUnbanned {
  /// The public key of the admin's wallet (`authority`).
  string admin_authority = 1;
  /// The public key of the `AdminProfile` PDA.
  string admin_pda = 2;
  /// The public key of the `UserProfile` PDA that was unbanned.
  string user_profile_pda = 3;
  /// The Unix timestamp of the unban.
  int64 ts = 4;
}

/// Emitted when a user requests to be unbanned.
message UserUnbanRequested {
  /// The public key of the user's wallet (`authority`).
  string user_authority = 1;
  /// The public key of the `UserProfile` PDA.
  string user_profile_pda = 2;
  /// The public key of the `AdminProfile` PDA this user is linked to.
  string admin_pda = 3;
  /// The fee paid by the user in lamports.
  uint64 fee_paid = 4;
  /// The Unix timestamp of the request.
  int64 ts = 5;
}
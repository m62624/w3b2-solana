syntax = "proto3";

// ===================================================================
// == Package for Gateway-specific API messages
// ===================================================================
package w3b2.protocol.gateway;

// --- Core RPC Message Types for Transactions ---

/// A generic response containing a base64-encoded, unsigned Solana transaction.
/// The client is expected to decode, sign, and send this back via
/// SubmitTransaction.
message UnsignedTransactionResponse {
  /// The raw bytes of the unsigned transaction, serialized using bincode.
  bytes unsigned_tx = 1;
}

/// A request to submit a signed transaction to the network.
message SubmitTransactionRequest {
  /// The raw bytes of the fully signed transaction, serialized using bincode.
  bytes signed_tx = 1;
}

/// A response containing the signature of a successfully submitted transaction.
message TransactionResponse {
  /// The base58-encoded signature of the submitted transaction.
  string signature = 1;
}

// --- "Prepare" Transaction Request Messages ---

/// Prepares a transaction to register a new AdminProfile.
message PrepareAdminRegisterProfileRequest {
  /// The public key of the admin's wallet, who will be the owner and signer.
  string authority_pubkey = 1;
  /// The public key for secure off-chain communication.
  string communication_pubkey = 2;
}
/// Prepares a transaction to configure an AdminProfile.
/// Fields are optional; only provided values will be updated.
message PrepareAdminSetConfigRequest {
  /// The public key of the admin's wallet (`authority`).
  string authority_pubkey = 1;
  /// The new public key of the oracle.
  optional string new_oracle_authority = 2;
  /// The new validity period for oracle signatures in seconds.
  optional int64 new_timestamp_validity = 3;
  /// The new public key for off-chain communication.
  optional string new_communication_pubkey = 4;
  /// The new fee for a user to request an unban.
  optional uint64 new_unban_fee = 5;
}
/// Prepares a transaction for an admin to withdraw earned funds.
message PrepareAdminWithdrawRequest {
  /// The public key of the admin's wallet (`authority`).
  string authority_pubkey = 1;
  /// The amount of lamports to withdraw from the internal balance.
  uint64 amount = 2;
  /// The public key of the wallet that will receive the funds.
  string destination = 3;
}
/// Prepares a transaction to close an AdminProfile account.
message PrepareAdminCloseProfileRequest {
  /// The public key of the admin's wallet (`authority`), who will receive the
  /// rent refund.
  string authority_pubkey = 1;
}
/// Prepares a transaction for an admin to send a command to a user.
message PrepareAdminDispatchCommandRequest {
  /// The public key of the admin's wallet (`authority`).
  string authority_pubkey = 1;
  /// The public key of the target `UserProfile` **PDA**.
  string target_user_profile_pda = 2;
  /// The `u64` identifier for the command or notification.
  uint64 command_id = 3;
  /// An opaque byte array for application-specific data.
  bytes payload = 4;
}
/// Prepares a transaction for an admin to ban a user.
message PrepareAdminBanUserRequest {
  /// The public key of the admin's wallet (`authority`).
  string authority_pubkey = 1;
  /// The public key of the target `UserProfile` **PDA** to ban.
  string target_user_profile_pda = 2;
}
/// Prepares a transaction for an admin to unban a user.
message PrepareAdminUnbanUserRequest {
  /// The public key of the admin's wallet (`authority`).
  string authority_pubkey = 1;
  /// The public key of the target `UserProfile` **PDA** to unban.
  string target_user_profile_pda = 2;
}
/// Prepares a transaction to log a generic off-chain action.
message PrepareLogActionRequest {
  /// The public key of the actor's wallet (user or admin).
  string authority_pubkey = 1;
  /// The public key of the `UserProfile` **PDA**.
  string user_profile_pda = 2;
  /// The public key of the `AdminProfile` **PDA**.
  string admin_profile_pda = 3;
  /// A `u64` identifier to correlate this action with a session.
  uint64 session_id = 4;
  /// A `u16` code representing the specific off-chain action.
  uint32 action_code = 5;
}

/// Prepares a transaction for a user to create a profile for a specific
/// service.
message PrepareUserCreateProfileRequest {
  /// The public key of the user's wallet, who will be the owner and signer.
  string authority_pubkey = 1;
  /// The public key of the target `AdminProfile` **PDA**.
  string target_admin_pda = 2;
  /// The public key for secure off-chain communication.
  string communication_pubkey = 3;
}
/// Prepares a transaction to update a UserProfile's communication key.
message PrepareUserUpdateCommKeyRequest {
  /// The public key of the user's wallet (`authority`).
  string authority_pubkey = 1;
  /// The public key of the `AdminProfile` **PDA** this user profile is linked
  /// to.
  string admin_profile_pda = 2;
  /// The new communication public key to set.
  string new_key = 3;
}
/// Prepares a transaction for a user to deposit funds into their profile.
message PrepareUserDepositRequest {
  /// The public key of the user's wallet (`authority`).
  string authority_pubkey = 1;
  /// The public key of the `AdminProfile` **PDA** this user profile is linked
  /// to.
  string admin_profile_pda = 2;
  /// The amount of lamports to deposit.
  uint64 amount = 3;
}
/// Prepares a transaction for a user to withdraw unspent funds from their
/// profile.
message PrepareUserWithdrawRequest {
  /// The public key of the user's wallet (`authority`).
  string authority_pubkey = 1;
  /// The public key of the `AdminProfile` **PDA** this user profile is linked
  /// to.
  string admin_profile_pda = 2;
  /// The amount of lamports to withdraw.
  uint64 amount = 3;
  /// The public key of the wallet that will receive the funds.
  string destination = 4;
}
/// Prepares a transaction to close a UserProfile account.
message PrepareUserCloseProfileRequest {
  /// The public key of the user's wallet (`authority`), who will receive the
  /// rent and balance refund.
  string authority_pubkey = 1;
  /// The public key of the `AdminProfile` **PDA** this user profile is linked
  /// to.
  string admin_profile_pda = 2;
}
/// Prepares a transaction for a user to call a service's command.
message PrepareUserDispatchCommandRequest {
  /// The public key of the user's wallet (`authority`).
  string authority_pubkey = 1;
  /// The public key of the target `AdminProfile` **PDA**.
  string target_admin_pda = 2;
  /// The `u16` identifier for the command to execute.
  uint32 command_id = 3;
  /// The price in lamports for the command, as signed by the oracle.
  uint64 price = 4;
  /// The Unix timestamp from the oracle's signature.
  int64 timestamp = 5;
  /// An opaque byte array for application-specific data.
  bytes payload = 6;
  /// The public key of the oracle that signed the price data.
  string oracle_pubkey = 7;
  /// The 64-byte Ed25519 signature from the oracle, as raw bytes.
  bytes oracle_signature = 8;
}
/// Prepares a transaction for a user to request an unban.
message PrepareUserRequestUnbanRequest {
  /// The public key of the user's wallet (`authority`).
  string authority_pubkey = 1;
  /// The public key of the `AdminProfile` **PDA** this user profile is linked to.
  string admin_profile_pda = 2;
}

// --- Messages for Event Streaming ---

/// A request to start listening for events for a specific PDA.
message ListenRequest {
  /// The public key of the `UserProfile` or `AdminProfile` **PDA** to monitor.
  string pda = 1;
}

/// A single item in the event stream sent from server to client.
message EventStreamItem {
  /// The source of the event (historical or real-time).
  EventSource source = 1;
  /// The actual on-chain event data.
  BridgeEvent event = 2;
}

/// A request to manually unsubscribe from an event stream.
message UnsubscribeRequest {
  /// The PDA of the subscription to terminate.
  string pda = 1;
}

/// Indicates the origin of a streamed event.
enum EventSource {
  UNKNOWN = 0;
  LIVE = 1;
  CATCHUP = 2;
}

// --- Event Messages (Mirrors of on-chain events) ---

/// Emitted when a new `AdminProfile` PDA is created.
message AdminProfileRegistered {
  /// The public key of the admin's wallet (`authority`).
  string authority = 1;
  /// The public key of the `AdminProfile` PDA that was registered.
  string admin_pda = 2;
  /// The public key for off-chain communication.
  string communication_pubkey = 3;
  /// The Unix timestamp of the registration.
  int64 ts = 4;
}
/// Emitted when an admin withdraws earned funds.
message AdminFundsWithdrawn {
  /// The public key of the admin's wallet (`authority`).
  string authority = 1;
  /// The public key of the `AdminProfile` PDA from which funds were withdrawn.
  string admin_pda = 2;
  /// The amount of lamports withdrawn.
  uint64 amount = 3;
  /// The public key of the wallet that received the funds.
  string destination = 4;
  /// The Unix timestamp of the withdrawal.
  int64 ts = 5;
}
/// Emitted when an `AdminProfile` PDA is closed.
message AdminProfileClosed {
  /// The public key of the admin's wallet (`authority`).
  string authority = 1;
  /// The public key of the `AdminProfile` **PDA** that was closed.
  string admin_pda = 2;
  /// The Unix timestamp of the closure.
  int64 ts = 3;
}
/// Emitted when an admin sends a command to a user.
message AdminCommandDispatched {
  /// The public key of the sender admin's wallet (`authority`).
  string sender = 1;
  /// The public key of the sender's `AdminProfile` PDA.
  string sender_admin_pda = 2;
  /// The public key of the target `UserProfile` **PDA**.
  string target_user_pda = 3;
  /// The `u64` identifier for the command.
  uint32 command_id = 4;
  /// An opaque byte array for application-specific data.
  bytes payload = 5;
  /// The Unix timestamp of the dispatch.
  int64 ts = 6;
}

// --- User Events ---

/// Emitted when a new `UserProfile` PDA is created.
message UserProfileCreated {
  /// The public key of the user's wallet (`authority`).
  string authority = 1;
  /// The public key of the `UserProfile` PDA that was created.
  string user_pda = 2;
  /// The public key of the `AdminProfile` **PDA** this profile is linked to.
  string target_admin_pda = 3;
  /// The public key for off-chain communication.
  string communication_pubkey = 4;
  /// The Unix timestamp of the creation.
  int64 ts = 5;
}
/// Emitted when a user updates their communication key.
message UserCommKeyUpdated {
  /// The public key of the user's wallet (`authority`).
  string authority = 1;
  /// The public key of the `UserProfile` **PDA** that was updated.
  string user_profile_pda = 2;
  /// The new communication public key.
  string new_comm_pubkey = 3;
  /// The Unix timestamp of the update.
  int64 ts = 4;
}
/// Emitted when a user deposits funds into their profile.
message UserFundsDeposited {
  /// The public key of the user's wallet (`authority`).
  string authority = 1;
  /// The public key of the `UserProfile` **PDA** that received the deposit.
  string user_profile_pda = 2;
  /// The amount of lamports deposited in this transaction.
  uint64 amount = 3;
  /// The user's new total `deposit_balance` after this deposit.
  uint64 new_deposit_balance = 4;
  /// The Unix timestamp of the deposit.
  int64 ts = 5;
}
/// Emitted when a user withdraws funds from their profile.
message UserFundsWithdrawn {
  /// The public key of the user's wallet (`authority`).
  string authority = 1;
  /// The public key of the `UserProfile` **PDA** from which funds were
  /// withdrawn.
  string user_profile_pda = 2;
  /// The amount of lamports withdrawn.
  uint64 amount = 3;
  /// The public key of the wallet that received the funds.
  string destination = 4;
  /// The user's new total `deposit_balance` after this withdrawal.
  uint64 new_deposit_balance = 5;
  /// The Unix timestamp of the withdrawal.
  int64 ts = 6;
}

/// Emitted when a `UserProfile` PDA is closed.
message UserProfileClosed {
  /// The public key of the user's wallet (`authority`).
  string authority = 1;
  /// The public key of the `UserProfile` PDA that was closed.
  string user_pda = 2;
  /// The public key of the `AdminProfile` **PDA** this profile was linked to.
  /// // This field is crucial for the admin to get notified.
  string admin_pda = 3;
  /// The Unix timestamp of the closure.
  int64 ts = 4;
}

// --- Operational Events ---

/// Emitted when a user calls a service's command.
message UserCommandDispatched {
  /// The public key of the sender user's wallet (`authority`).
  string sender = 1;
  /// The public key of the sender's `UserProfile` PDA.
  string sender_user_pda = 2;
  /// The public key of the target `AdminProfile` **PDA**.
  string target_admin_pda = 3;
  /// The `u16` identifier for the command being executed.
  uint32 command_id = 4;
  /// The amount in lamports paid for this command (0 if free).
  uint64 price_paid = 5;
  /// An opaque byte array for application-specific data.
  bytes payload = 6;
  /// The Unix timestamp of the dispatch.
  int64 ts = 7;
}
/// A generic event for logging significant off-chain actions.
message OffChainActionLogged {
  /// The public key of the actor's wallet (user or admin).
  string actor = 1;
  /// The public key of the `UserProfile` PDA involved in this action.
  string user_profile_pda = 2;
  /// The public key of the `AdminProfile` PDA involved in this action.
  string admin_profile_pda = 3;
  /// A `u64` identifier to correlate actions to a session.
  uint64 session_id = 4;
  /// A `u16` code representing the specific off-chain action (e.g., HTTP status
  /// code).
  uint32 action_code = 5;
  /// The Unix timestamp of the logged action.
  int64 ts = 6;
}

// --- Wrapper Event ---

/// A generic wrapper that contains one of any possible event types from the
/// program. This is used for unified event streams.
message BridgeEvent {
  oneof event {
    AdminProfileRegistered admin_profile_registered = 1;
    AdminConfigUpdated admin_config_updated = 3;
    AdminFundsWithdrawn admin_funds_withdrawn = 4;
    AdminProfileClosed admin_profile_closed = 5;
    AdminCommandDispatched admin_command_dispatched = 6;
    UserProfileCreated user_profile_created = 7;
    UserCommKeyUpdated user_comm_key_updated = 8;
    UserFundsDeposited user_funds_deposited = 9;
    UserFundsWithdrawn user_funds_withdrawn = 10;
    UserProfileClosed user_profile_closed = 11;
    UserCommandDispatched user_command_dispatched = 12;
    OffChainActionLogged off_chain_action_logged = 13;
    AdminUnbanFeeUpdated admin_unban_fee_updated = 14;
    UserBanned user_banned = 15;
    UserUnbanned user_unbanned = 16;
    UserUnbanRequested user_unban_requested = 17;
  }
}

/// Emitted when an admin updates their profile configuration.
message AdminConfigUpdated {
  string authority = 1;
  string admin_pda = 2;
  string new_oracle_authority = 3;
  int64 new_timestamp_validity = 4;
  string new_communication_pubkey = 5;
  int64 ts = 6;
}

/// Emitted when an admin updates the unban fee.
message AdminUnbanFeeUpdated {
  /// The public key of the admin's wallet (`authority`).
  string authority = 1;
  /// The public key of the `AdminProfile` PDA that was updated.
  string admin_pda = 2;
  /// The new fee in lamports for requesting an unban.
  uint64 new_unban_fee = 3;
  /// The Unix timestamp of the update.
  int64 ts = 4;
}

/// Emitted when a user is banned by an admin.
message UserBanned {
  /// The public key of the admin's wallet (`authority`).
  string admin_authority = 1;
  /// The public key of the `AdminProfile` PDA.
  string admin_pda = 2;
  /// The public key of the `UserProfile` PDA that was banned.
  string user_profile_pda = 3;
  /// The Unix timestamp of the ban.
  int64 ts = 4;
}

/// Emitted when a user is unbanned by an admin.
message UserUnbanned {
  /// The public key of the admin's wallet (`authority`).
  string admin_authority = 1;
  /// The public key of the `AdminProfile` PDA.
  string admin_pda = 2;
  /// The public key of the `UserProfile` PDA that was unbanned.
  string user_profile_pda = 3;
  /// The Unix timestamp of the unban.
  int64 ts = 4;
}

/// Emitted when a user requests to be unbanned.
message UserUnbanRequested {
  /// The public key of the user's wallet (`authority`).
  string user_authority = 1;
  /// The public key of the `UserProfile` PDA.
  string user_profile_pda = 2;
  /// The public key of the `AdminProfile` PDA this user is linked to.
  string admin_pda = 3;
  /// The fee paid by the user in lamports.
  uint64 fee_paid = 4;
  /// The Unix timestamp of the request.
  int64 ts = 5;
}